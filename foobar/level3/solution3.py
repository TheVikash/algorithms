from collections import deque
xLength = -1
yLength = -1
vertex = {}
listIndex = deque([])
matrix = []
def answer(map):
    global matrix,xLength,yLength,vertex,listIndex
    matrix = map
    xLength = len(map)
    yLength = len(map[0])
    vertexInit()
    return shortestPath()
    


def vertexInit():
    for i in range(0,xLength):
        for j in range(0,yLength):
            key = str(i)+','+str(j)
            v = {}
            v['d'] = float('inf')
            v['d1'] = float('inf') 
            if(i == 0 and j == 0):
                v['d'] = 1
            v['pos'] = key
            v['bit'] = False
            v['bit1'] = False
            vertex[key] = v
            listIndex.append(key)

def shortestPath():
    s = []
    

    while len(listIndex) != 0:
        u = listIndex[0]
        listIndex.popleft()
        relaxAdjacent(u)
        

    # showIndexes()
    return vertex[str(xLength - 1) + ',' + str(yLength - 1)]['d']
        
def relaxAdjacent(u):
    pos = u.split(',')
    i = int(pos[0])
    j = int(pos[1])
    right = str(i) + ',' + str(j + 1)
    down = str(i + 1) + ',' + str(j)
    left = str(i) + ',' + str(j - 1)
    up = str(i - 1) + ',' + str(j)
    
    if(j - 1 >=0):
        relax(u,left)

    if(i - 1 >=0):
        relax(u,up)

    if(i + 1 < xLength):
        relax(u,down)

    if(j + 1 < yLength):
        relax(u,right)

def relax(source,child):
    sV = source.split(',')
    si = int(sV[0])
    sj = int(sV[1])
    cV = child.split(',')
    ci = int(cV[0])
    cj = int(cV[1])
    if(vertex[child]['d'] > vertex[source]['d'] + 1) :
        if(matrix[ci][cj] == 0):
            vertex[child]['d'] = vertex[source]['d'] + 1
            vertex[child]['bit'] = vertex[source]['bit']
            relaxAdjacent(child)
    
        elif(matrix[si][sj] == 0 and matrix[ci][cj] == 1 and vertex[source]['bit'] == False):
            vertex[child]['d'] = vertex[source]['d'] + 1
            vertex[child]['bit'] = True 
    
        else:
            vertex[child]['bit'] = True


def showIndexes():
    for i in range(0,xLength):
        for j in range(0,yLength):
            key = str(i)+','+str(j)
            print vertex[key]['pos'] , '-->', vertex[key]['d'] , '-->', vertex[key]['bit'], '-->', vertex[key]['d1'] , '-->', vertex[key]['bit1']
    


      
print answer([[0, 1, 1, 0], [0, 0, 0, 1], [1, 1, 0, 0], [1, 1, 1, 0]])
print answer([[0,0,0,0,0,0],[1,1,1,1,1,0],[0,0,0,0,0,0],[0,1,1,1,1,1],[0,1,1,1,1,1],[0,0,0,0,0,0]])

print answer([[0,0,0,0,0,0,0,0,0,0],[1,1,1,0,1,0,0,0,0,0],[0,0,0,0,1,1,1,1,1,0],
            [0,0,1,1,1,1,1,1,1,0],[1,0,1,0,0,0,1,1,1,0],[1,0,0,0,1,0,1,1,1,0],
            [1,1,1,1,0,0,0,1,1,0],[1,0,0,0,0,1,0,0,1,0],[1,0,1,1,1,1,1,0,1,0],
            [1,0,0,0,0,0,0,0,0,0]])

print answer([[0,1,0,0,1,0,0,0,0,1],[1,1,1,0,1,0,0,0,0,0],[0,0,0,0,1,1,1,1,1,0],
            [0,0,1,1,1,1,1,1,1,0],[1,0,1,0,0,0,1,1,1,0],[1,0,0,0,1,0,1,1,1,0],
            [1,1,1,1,0,0,0,1,1,0],[1,0,0,0,0,1,0,0,1,0],[1,0,1,1,1,1,1,0,1,0],
            [1,0,0,0,0,0,0,0,0,0]])

print answer([
    [0,1,0,1,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1],
    [0,0,0,1,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1],
    [1,1,0,1,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1],
    [0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1],
    [1,1,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1],
    [1,1,1,1,1,0,1,1,0,0,1,1,1,1,1,1,1,1,1,1],
    [1,1,1,1,1,0,1,1,0,0,1,1,1,1,1,1,1,1,1,1],
    [1,1,1,1,1,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1],
    [1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1],
    [1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,1,1],
    [1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,1,1],
    [1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,1,1],
    [1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1],
    [1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1],
    [1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,1,1],
    [1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,1,1,1],
    [1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1],
    [1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1],
    [1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1],
    [1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0]
])

print answer([[0,0,0,0,0,1,1,0,0,0,0,1,1,1,0,0,0,0,0,0],[0,1,1,1,1,1,1,1,0,0,0,1,0,0,1,1,0,0,1,0],
              [0,1,1,0,0,0,0,0,1,1,1,0,1,1,1,1,0,1,1,1],[0,0,0,0,1,1,1,0,0,1,1,0,0,0,0,0,1,0,0,0],
              [1,1,1,0,1,1,1,0,0,1,0,0,1,1,1,0,1,1,0,0],[1,1,1,1,1,1,1,0,1,0,1,0,1,1,1,0,1,1,0,0],
              [0,0,0,0,0,0,0,0,1,1,1,0,1,0,1,0,0,0,1,0],[1,0,1,0,1,1,1,1,1,1,1,0,0,1,1,0,1,1,1,0],
              [1,0,1,1,1,1,1,1,1,1,1,0,1,1,0,0,1,1,1,0],[0,0,0,0,1,0,0,0,0,0,0,0,1,1,1,0,1,1,1,0],
              [1,1,1,0,1,1,1,1,1,1,1,0,1,0,1,0,1,1,1,0],[1,0,0,0,1,1,1,1,1,1,1,0,1,1,0,0,0,0,0,1],
              [0,0,1,1,1,1,1,1,1,1,1,0,0,1,1,0,1,1,0,0],[1,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,1,1,0,0],
              [1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,0,0],[1,1,0,1,1,1,0,1,1,1,1,0,0,0,1,0,0,1,1,0],
              [1,1,0,1,0,1,0,0,0,0,1,0,1,1,1,0,1,0,1,0],[1,1,0,1,1,0,1,1,1,1,0,1,0,0,1,0,1,0,1,0],
              [1,1,1,1,1,1,1,0,0,0,0,1,1,0,1,0,1,1,0,0],[1,1,0,1,1,1,1,1,1,1,1,0,0,0,1,0,0,0,0,0]])

print answer([
    [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
    [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
    [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
    [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
    [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
    [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
    [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
    [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
    [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
    [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
])

print answer([
    [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
    [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
    [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
    [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
    [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
    [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
    [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
    [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
    [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
    [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
    [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
    [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
    [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
    [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
    [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
    [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
    [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
    [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
    [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
    [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]  
])
